// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "relationJoins"]
}

datasource db {
  provider  = "postgres"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id                   String    @id @default(nanoid())
  email                String    @unique
  stripeAccountId      String?   @default("")
  name                 String?   @default("")
  firstName            String?   @default("")
  lastName             String?   @default("")
  phone                String?   @default("")
  emailConsent         Boolean   @default(false)
  emailConsentAt       DateTime?
  salt                 String    @default("")
  hash                 String    @default("")
  firebaseId           String    @default("")
  emailVerified        Boolean   @default(false)
  isDeleted            Boolean   @default(false)
  deletedAt            DateTime?
  deletedReason        String?
  notificationSettings Json      @default("{}")

  profile             Profile?             @relation("owned_by")
  profilesCreated     Profile[]            @relation("profile_created_by")
  accounts            Account[]
  sessions            Session[]
  subscriptions       Subscription[]
  muxVideos           MuxVideo[]
  passwordResetTokens PasswordResetToken[]
  emailsSent          EmailSent[]
  ticketPurchases     TicketPurchase[]

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  lastLoginAt DateTime @default(now())
}

model PasswordResetToken {
  token   String   @id
  userId  String
  user    User     @relation(fields: [userId], references: [id])
  expires DateTime
}

model Country {
  code String @id
  name String

  cities City[] @relation("country_cities")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model City {
  id               String @id
  name             String
  region           String @default("")
  countryCode      String
  description      String @default("")
  slug             String @unique
  lat              Float
  lng              Float
  membersCount     Int    @default(0)
  subscribersCount Int    @default(0)
  viewsCount       Int    @default(0)

  profiles    Profile[]        @relation("profile_city")
  country     Country          @relation("country_cities", fields: [countryCode], references: [code])
  posts       Post[]           @relation("post_city")
  subscribers CitySubscriber[] @relation("subscribers")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([membersCount(sort: Desc)])
}

model Profile {
  id               String    @id @default(nanoid())
  username         String    @unique
  firebaseUsername String    @default("")
  pronounce        String    @default("they")
  name             String
  bio              String    @default("")
  story            String    @default("")
  firebaseId       String    @default("")
  claimed          Boolean   @default(false)
  formattedAddress String?
  mapUrl           String?
  lng              Float?
  lat              Float?
  placeId          String?
  type             String
  photo            String?
  website          String?
  instagram        String?
  facebook         String?
  phone            String?
  youtube          String?
  spotify          String?
  tiktok           String?
  linkedin         String?
  whatsapp         String?
  threads          String?
  twitter          String?
  vk               String?
  telegram         String?
  couchsurfing     String?
  airbnb           String?
  blablacar        String?
  createdById      String?
  lastLoginAt      DateTime?
  isDeleted        Boolean   @default(false)
  deletedAt        DateTime?
  deletedReason    String?
  followersCount   Int       @default(0)
  followingCount   Int       @default(0)
  viewsCount       Int       @default(0)
  visibility       String    @default("Public")
  timezone         String?
  locales          Json?
  gender           String?
  birthday         DateTime?
  objectives       Json?
  step             String?
  invitedBy        String?
  daysUsed         Int?
  pwaUsed          Boolean?
  oldCities        Json?
  privacySettings  Json?

  userId          String? @unique
  user            User?   @relation("owned_by", fields: [userId], references: [id])
  cityId          String?
  city            City?   @relation("profile_city", fields: [cityId], references: [id])
  posts           Post[]  @relation("post_author")
  reviews         Post[]  @relation("reviews")
  eventsCreated   Event[] @relation("event_created_by")
  eventsOrganized Event[] @relation("event_organized_by")
  eventsHosted    Event[] @relation("event_hosted_by")

  courses            Course[]          @relation("course_instructor")
  createdBy          User?             @relation("profile_created_by", fields: [createdById], references: [id])
  styles             Experience[]      @relation("profile_experience")
  followers          ProfileFollower[] @relation("followers")
  following          ProfileFollower[] @relation("following")
  cities             CitySubscriber[]  @relation("cities")
  eventsParticipated Guest[]           @relation("guest_profile")
  videosAdded        Video[]           @relation("video_created_by")
  votes              Vote[]            @relation("vote_created_by")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  calendars       Calendar[]     @relation("calendar_owner")
  ConversationAsA Conversation[] @relation("AProfile")
  ConversationAsB Conversation[] @relation("BProfile")
  messages        Message[]

  @@index([photo])
  @@index([userId])
  @@index([cityId])
  @@index([createdAt(sort: Desc)])
  @@map("Profile")
}

model Experience {
  level       String
  highlighted Boolean

  profileId String
  profile   Profile    @relation("profile_experience", fields: [profileId], references: [id])
  styleId   Int
  style     DanceStyle @relation("experience_style", fields: [styleId], references: [id])

  @@unique([profileId, styleId])
  @@index([profileId])
  @@index([styleId])
}

model Post {
  id          String  @id @default(nanoid())
  title       String  @default("")
  image       String  @default("")
  summary     String  @default("")
  type        String  @default("")
  slug        String  @unique
  published   Boolean @default(false)
  firebaseId  String  @default("")
  attachments Json?
  content     Json?
  replyTo     String?
  replyToPost Post?   @relation("post_reply_to", fields: [replyTo], references: [id])

  author    Profile  @relation("post_author", fields: [authorId], references: [id])
  authorId  String
  event     Event?   @relation("post_event", fields: [eventId], references: [id])
  eventId   String?
  courseId  String?
  course    Course?  @relation("post_course", fields: [courseId], references: [id])
  profile   Profile? @relation("reviews", fields: [profileId], references: [id])
  profileId String?
  cityId    String?
  city      City?    @relation("post_city", fields: [cityId], references: [id])

  styleId Int?
  style   DanceStyle? @relation("post_style", fields: [styleId], references: [id])

  pinned        Boolean @default(false)
  upVotes       Int     @default(0)
  downVotes     Int     @default(0)
  commentsCount Int     @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  replies   Post[]   @relation("post_reply_to")
}

model Event {
  id          String    @id @default(nanoid())
  shortId     String    @default(nanoid(5))
  slug        String?
  name        String?
  startDate   DateTime?
  endDate     DateTime?
  type        String    @default("Party")
  description String    @default("")
  cover       String    @default("")
  price       String    @default("")
  firebaseId  String    @default("")
  published   Boolean   @default(false)
  status      String    @default("draft") // Values: draft, published, archived, cancelled
  ticketUrl   String?

  sourceUrl   String?
  importError String? @db.Text

  styles          DanceStyle[]
  creatorId       String
  creator         Profile          @relation("event_created_by", fields: [creatorId], references: [id])
  organizerId     String?
  organizer       Profile?         @relation("event_organized_by", fields: [organizerId], references: [id])
  venueId         String?
  venue           Profile?         @relation("event_hosted_by", fields: [venueId], references: [id])
  posts           Post[]           @relation("post_event")
  tickets         Ticket[]         @relation("event_tickets")
  guests          Guest[]          @relation("event_guests")
  ticketPurchases TicketPurchase[] @relation("event_purchases")

  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  calendarEvents CalendarEvent[] @relation("calendar_event_to_event")
}

model Ticket {
  id              String           @id @default(nanoid())
  name            String
  price           Int // Price in cents
  currency        String           @default("EUR")
  items           String?
  stripeProductId String?
  stripePriceId   String?
  eventId         String
  event           Event            @relation("event_tickets", fields: [eventId], references: [id], onDelete: Cascade)
  purchases       TicketPurchase[] @relation("ticket_purchases")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model TicketPurchase {
  id                      String  @id @default(nanoid())
  userId                  String
  user                    User    @relation(fields: [userId], references: [id])
  ticketId                String
  ticket                  Ticket  @relation("ticket_purchases", fields: [ticketId], references: [id])
  eventId                 String
  event                   Event   @relation("event_purchases", fields: [eventId], references: [id])
  guestId                 String?
  guest                   Guest?  @relation(fields: [guestId], references: [id])
  status                  String  @default("pending") // 'pending', 'completed', 'failed', 'refunded'
  stripeCheckoutSessionId String?
  stripePaymentIntentId   String?
  quantity                Int     @default(1)
  totalAmount             Int // Total amount paid in cents
  currency                String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model DanceStyle {
  id           Int      @id @default(autoincrement())
  name         String
  hashtag      String   @unique
  synonyms     String?
  regexp       String?
  popular      Boolean  @default(false)
  popularity   Int?
  familyOnly   Boolean  @default(false)
  description  String?
  history      String?
  origins      String?
  adjectives   String?
  type         String?
  holding      String?
  year         String?
  predecessors String?
  parent       String?
  influence    String?
  family       String?
  region       String?
  country      String?
  genres       String?
  source       String?
  root         Boolean?
  partner      Boolean?
  group        Boolean?
  related      String?
  music        String?
  timing       String?
  active       Boolean?
  video        String?
  intro        String?

  membersCount Int @default(0)
  eventsCount  Int @default(0)

  events         Event[]
  experiences    Experience[]    @relation("experience_style")
  videos         Video[]         @relation("video_style")
  posts          Post[]          @relation("post_style")
  calendarEvents CalendarEvent[] @relation("calendar_event_styles")

  @@index([membersCount(sort: Desc)])
}

model ProfileFollower {
  id Int @id @default(autoincrement())

  followerId String
  follower   Profile @relation("following", fields: [followerId], references: [id])
  profileId  String
  profile    Profile @relation("followers", fields: [profileId], references: [id])

  createdAt DateTime @default(now())

  @@unique([followerId, profileId])
}

model CitySubscriber {
  id Int @id @default(autoincrement())

  cityId    String
  city      City    @relation("subscribers", fields: [cityId], references: [id])
  profileId String
  profile   Profile @relation("cities", fields: [profileId], references: [id])

  @@unique([cityId, profileId])
}

model Redirect {
  id   String  @id @default(nanoid())
  from String
  to   String
  note String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Guest {
  id              String           @id @default(nanoid())
  profileId       String
  profile         Profile          @relation("guest_profile", fields: [profileId], references: [id])
  eventId         String
  event           Event            @relation("event_guests", fields: [eventId], references: [id])
  ticketPurchases TicketPurchase[]

  role   String // "artist", "attendee", "VIP", "organizer", "staff", "sponsor", "media"
  status String // "invited", "confirmed", "waitlisted", "cancelled", "registered", "interested", "declined", "no_show"

  invitedAt    DateTime?
  confirmedAt  DateTime?
  cancelledAt  DateTime?
  registeredAt DateTime?
  waitlistedAt DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([profileId, eventId]) // Ensure a profile can only be linked to an event once
}

model Video {
  id      String     @id @default(nanoid())
  url     String     @unique
  styleId Int
  style   DanceStyle @relation("video_style", fields: [styleId], references: [id])

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdBy   Profile? @relation("video_created_by", fields: [createdById], references: [id])
  createdById String?
}

model MuxVideo {
  id          String  @id @default(nanoid())
  userId      String
  user        User    @relation(fields: [userId], references: [id])
  uploadId    String?
  assetId     String?
  playbackId  String?
  title       String?
  status      String?
  duration    Float?
  aspectRatio String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Vote {
  id          String   @id @default(nanoid())
  winnerId    String
  loserId     String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdBy   Profile  @relation("vote_created_by", fields: [createdById], references: [id])
  createdById String
}

model Course {
  id           String  @id @default(nanoid())
  slug         String  @unique
  name         String
  description  String?
  subheader    String?
  instructorId String?
  coverUrl     String?
  status       String  @default("draft") // Values: draft, published, archived

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  instructor Profile?         @relation("course_instructor", fields: [instructorId], references: [id])
  modules    CourseModule[]
  resources  CourseResource[]
  offers     Offer[]
  reviews    Post[]           @relation("post_course")
}

model CourseModule {
  id          String    @id @default(nanoid())
  name        String
  order       Int
  description String?
  courseId    String
  startsAt    DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  course  Course         @relation(fields: [courseId], references: [id], onDelete: Cascade)
  lessons CourseLesson[]
}

model CourseLesson {
  id       String  @id @default(nanoid())
  name     String
  duration Int
  fileUrl  String?
  videoId  String?
  locked   Boolean @default(false)
  moduleId String
  order    Int     @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  module CourseModule @relation(fields: [moduleId], references: [id], onDelete: Cascade)
}

model CourseResource {
  id          String  @id @default(nanoid())
  name        String
  description String
  url         String
  locked      Boolean @default(false)
  courseId    String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)
}

model Offer {
  id                String         @id @default(nanoid())
  name              String
  price             Int
  currency          String
  duration          String
  validFrom         DateTime?
  validThrough      DateTime?
  courseId          String
  items             String?
  stripePaymentLink String?
  stripeProductId   String?
  stripePriceId     String?
  subscriptions     Subscription[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)
}

model Subscription {
  id                   String    @id @default(nanoid())
  userId               String
  user                 User      @relation(fields: [userId], references: [id])
  offerId              String
  offer                Offer     @relation(fields: [offerId], references: [id])
  status               String    @default("pending") // 'active', 'canceled', 'past_due'
  nextBillingDate      DateTime?
  stripeSubscriptionId String?

  endAt      DateTime?
  canceledAt DateTime?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
}

model EmailSent {
  id Int @id @default(autoincrement())

  mailgunId String
  userId    String
  user      User   @relation(fields: [userId], references: [id])
  type      String
  subject   String
  params    Json
  status    String
  events    Json   @default("[]")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Calendar {
  id   String @id @default(nanoid())
  url  String
  name String @default("")

  profileId String
  profile   Profile @relation("calendar_owner", fields: [profileId], references: [id])

  state        String    @default("pending") // pending, processing, processed, failed
  lastSyncedAt DateTime?

  newCount      Int @default(0)
  pastCount     Int @default(0)
  totalCount    Int @default(0)
  approvedCount Int @default(0)
  upcomingCount Int @default(0)

  events CalendarEvent[] @relation("calendar_events")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([profileId, url])
  @@index([profileId])
}

model CalendarEvent {
  id         String   @id @default(nanoid())
  eventId    String?
  event      Event?   @relation("calendar_event_to_event", fields: [eventId], references: [id], onDelete: SetNull)
  calendarId String
  calendar   Calendar @relation("calendar_events", fields: [calendarId], references: [id], onDelete: Cascade)

  providerItemId String //original iCal uid
  name           String?
  description    String?  @default("")
  startDate      DateTime
  endDate        DateTime
  sourceUrl      String?
  approved       Boolean  @default(false)

  location   String?
  facebookId String?
  eventType  String?

  styles DanceStyle[] @relation("calendar_event_styles")

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@unique([calendarId, providerItemId])
  @@index([startDate])
  @@index([calendarId, startDate])
  @@index([facebookId])
}

model Conversation {
  id          String   @id @default(cuid())
  pairKey     String   @unique // `${min(aId,bId)}-${max(aId,bId)}`
  aId         String
  bId         String
  aLastSeenAt DateTime @default(now())
  bLastSeenAt DateTime @default(now())

  messages Message[] @relation("ConversationMessages")

  a Profile @relation("AProfile", fields: [aId], references: [id])
  b Profile @relation("BProfile", fields: [bId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([aId])
  @@index([bId])
}

model Message {
  id             String   @id @default(cuid())
  conversationId String
  senderId       String
  content        String
  isDeleted      Boolean  @default(false)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  conversation Conversation @relation("ConversationMessages", fields: [conversationId], references: [id], onDelete: Cascade)
  sender       Profile      @relation(fields: [senderId], references: [id])

  @@index([conversationId, createdAt])
}
